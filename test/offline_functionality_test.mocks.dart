// Mocks generated by Mockito 5.4.4 from annotations
// in face_auth_compatible/test/offline_functionality_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:face_auth_compatible/model/local_attendance_model.dart' as _i5;
import 'package:face_auth_compatible/repositories/attendance_repository.dart'
    as _i4;
import 'package:face_auth_compatible/services/connectivity_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i2.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i2.ConnectionStatus> get connectionStatusStream =>
      (super.noSuchMethod(
        Invocation.getter(#connectionStatusStream),
        returnValue: _i3.Stream<_i2.ConnectionStatus>.empty(),
      ) as _i3.Stream<_i2.ConnectionStatus>);

  @override
  _i2.ConnectionStatus get currentStatus => (super.noSuchMethod(
        Invocation.getter(#currentStatus),
        returnValue: _i2.ConnectionStatus.online,
      ) as _i2.ConnectionStatus);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AttendanceRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttendanceRepository extends _i1.Mock
    implements _i4.AttendanceRepository {
  MockAttendanceRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> recordCheckIn({
    required String? employeeId,
    required DateTime? checkInTime,
    required String? locationId,
    required String? locationName,
    required double? locationLat,
    required double? locationLng,
    String? imageData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordCheckIn,
          [],
          {
            #employeeId: employeeId,
            #checkInTime: checkInTime,
            #locationId: locationId,
            #locationName: locationName,
            #locationLat: locationLat,
            #locationLng: locationLng,
            #imageData: imageData,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> recordCheckOut({
    required String? employeeId,
    required DateTime? checkOutTime,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordCheckOut,
          [],
          {
            #employeeId: employeeId,
            #checkOutTime: checkOutTime,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i5.LocalAttendanceRecord>> getPendingRecords() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingRecords,
          [],
        ),
        returnValue: _i3.Future<List<_i5.LocalAttendanceRecord>>.value(
            <_i5.LocalAttendanceRecord>[]),
      ) as _i3.Future<List<_i5.LocalAttendanceRecord>>);

  @override
  _i3.Future<void> syncPendingRecords() => (super.noSuchMethod(
        Invocation.method(
          #syncPendingRecords,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
